<?xml version='1.0'?>
<sdf version='1.4'>

<!-- This file is provided as an example of single body robot -->
<!-- Please read through the comments to understand this file -->

<!-- This is the name of the model -->
<model name='quadrotor'>


<!-- #################### PHYISICAL DESCRIPTION #################### -->
<!-- pose of the quadrotor in the world frame -->
	<pose>0 0 0.04 0 0 0</pose>
	
	<!-- Each model is represented as a sequence of links.
	The first link (root) is the base link defined below -->
	<link name='base_link'>

		<!-- The first thing to define about a link are its inertial
		properties:
		 - mass
		 - pose with respect to the base frame
		 - matrix of iniertia (https://en.wikipedia.org/wiki/Moment_of_inertia) -->

		<inertial>
			<!-- mass in kg -->
			<mass>1.477</mass>
			<!-- Position x y z in meters and orientation roll pitch yaw angles in rad (x y z r p y) -->
			<pose>0 0 0 0 0 0</pose> 

			<!-- Matrix of inertia I in kg*m^2
				- notice that the matrix is symmetric: I = I^T, so only 6 parameters 
					are needed to define a 3x3 matrix
							| ixx ixy ixz | 
					I = | ixy iyy iyz |
							| ixz iyz izz |
			-->
			<inertia>
				<ixx>0.1152</ixx>
				<ixy>0</ixy>
				<ixz>0</ixz>
				<iyy>0.1152</iyy>
				<iyz>0</iyz>
				<izz>0.218</izz>
			</inertia>
		</inertial>

		<!-- During the simulation, you want to see something happening.
			Now we specify the visual aspact of the link -->
		<visual name='visual'>
			<geometry>
				<!--<box> <size>1 1 1</size> </box> -->
				 <mesh><uri>file://models/quadrotor/quadrotor_4.dae</uri></mesh>
			</geometry>
			<cast_shadows>false</cast_shadows>
		</visual>

		<!-- If your robot hits something, the simulator must compute it and
			compute its effects. To do this, the simulator needs a specification
			of the shape of the link -->
		<collision name='collision'>
			<geometry>
				<!-- <box> <size>1 1 1</size> </box> -->
				<mesh><uri>file://models/quadrotor/quadrotor_4.dae</uri></mesh>
			</geometry>
		</collision>

		<!-- Does gravity apply to your model? 1=yes, 0=no -->
		<gravity>1</gravity>
    



<!-- #################### SENSORS #################### -->
    <!-- We can attach sensors to links. In the following, there are examples of 
			commonly used sensors in mobile robotics -->

    <!-- IMU (Inertial Measurement Unit) sensor in 100fps -->
    <!-- First you need to specify that a generic sensor is attached to this link -->
		<sensor name='sensor_imu' type='imu'>
			
			<!-- The following are options for any type of sensor -->
			<!-- Is the sensor always on? 1=yes, 0=no -->
			<always_on> 1 </always_on>
			<!-- how many measurements per second does this sensor provide?  -->
			<update_rate> 1 </update_rate>
			<!-- pose with respect to the frame of the link to which this sensor is attached -->
			<pose> 0 0 0 0 0 0 </pose>

			<!-- Any sensor needs a plugin. In general, the plugin is
				specific for the sensor type -->
			<plugin name='ros_imu' filename='libplugin_ros_imu.so'>
			</plugin>
			<!-- Here you can pass some parameters specific to the sensor -->
			<imu>
				<!-- Noise is error on the measurements - a random variable -->
				<noise> 
					<type>gaussian</type>
					<rate>
						<mean> 2 </mean>
						<stddev> 0 </stddev>
					</rate>
					<accel>
						<mean> 0 </mean>
						<stddev> 0.00 </stddev>
					</accel>
				</noise>
			</imu>
		</sensor>




<!-- front facing camera -->
		<sensor name="camera" type="camera">

			<plugin name='camera' filename='libplugin_ros_cam.so'>
				<!-- here we are passing a parameter to the plugin.
					Plugin parameters are sensor-specific-->
				<imageTopicName>/drone/camera/image_raw</imageTopicName> 
			</plugin>
			
			<!-- These are the generic sensor options as we have seen before -->
			<pose> 0.0 0.0 0.0 0 1.4 0.0 </pose>

			<always_on>1</always_on>

			<update_rate>10</update_rate>

			<!-- This is an additional option. If true, the image will be visible during the simulation, if false, it will not. -->
			<visualize>true</visualize>

			<!-- These are the camera specific parameters -->
			<camera>
				
				<!-- horizontal field of view, in rad -->
				<horizontal_fov>1.57</horizontal_fov>
				
				<!-- how many pixels compose the image, and how each pixel looks like -->
				<image>
					<width>640</width> <!-- the images are 640 pixels wide (640 columns) -->
					<height>360</height> <!-- the images are 640 pixels high (360 rows) -->
					<format>R8G8B8</format> <!-- each pixel contains 8 bit for the Red value (R8), 8 bits for the Green value (G8), and 8 bits for the Blue value (B8) -->
				</image>

				<clip>
					<near>0.1</near> <!-- closest object that is visible, in m --> 
					<far>100</far> <!-- farthest object that is visible, in m -->
				</clip>
				
				<!-- additional noise on each pixel -->
				<noise>
					<type>gaussian</type>
					<mean>0.0</mean>
					<stddev>0.005</stddev>
				</noise>
			</camera>

		</sensor>
	</link>




<!-- #################### ACTUATION #################### -->
	<plugin name='simple_drone' filename='libplugin_drone.so'>
		<bodyName>base_link</bodyName>
		<imuTopic>/drone/imu</imuTopic>
		<rollpitchProportionalGain>10.0</rollpitchProportionalGain>
		<rollpitchDifferentialGain>5.0</rollpitchDifferentialGain>
		<rollpitchLimit>0.5</rollpitchLimit>
		<yawProportionalGain>2.0</yawProportionalGain>
		<yawDifferentialGain>1.0</yawDifferentialGain>
		<yawLimit>1.5</yawLimit>
		<velocityXYProportionalGain>5.0</velocityXYProportionalGain>
		<velocityXYDifferentialGain>2.3</velocityXYDifferentialGain>
		<velocityXYLimit>2</velocityXYLimit>
		<velocityZProportionalGain>5.0</velocityZProportionalGain>
		<velocityZDifferentialGain>1.0</velocityZDifferentialGain>
		<velocityZLimit>-1</velocityZLimit>
		<positionXYProportionalGain>1.1</positionXYProportionalGain>
		<positionXYDifferentialGain>0.0</positionXYDifferentialGain>
		<positionXYIntegralGain>0.0</positionXYIntegralGain>
		<positionXYLimit>5</positionXYLimit>
		<positionZProportionalGain>1.0</positionZProportionalGain>
		<positionZDifferentialGain>0.2</positionZDifferentialGain>
		<positionZLimit>-1</positionZLimit>
		<maxForce>30</maxForce>
		<motionSmallNoise>0.05</motionSmallNoise>
		<motionDriftNoise>0.03</motionDriftNoise>
		<motionDriftNoiseTime>5.0</motionDriftNoiseTime>
	</plugin>


</model>


	<gazebo reference="base_link">
		<material>Gazebo/Blue</material>
	</gazebo>
</sdf>
